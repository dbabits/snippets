#If a string prints with embedded \n, 
#and is prefixed with b"str" - it's binary repr -
#The b indicates that it's a binary string
#use s.decode() to print as string. Opposite is repr()
print(printData().decode())

# Note:
# in iter() call:
# b'' + universal_newlines=False: everything prefixed w b'
# NO b'' + universal_newlines=True : good
# Any other combination: endless loop
# That despite examples online

#Here, piping through bash is a must IF command includes process substitution, or get bash syntax error
# Alternatively, save it to a file and execute the file - easier.
#shebang line no good
#-s -- to oass args
cmd ='''
cat <<'EOF' |/bin/bash -s --
  cat <(echo 'Hello')
EOF
     '''
#Print stderr as we go, capture all stdout into memory(that's supposed to be the data we later need)
#Shell must be False if passing arglist, otherwise args list is not passed
p=subprocess.Popen([cmd, 'arg1'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,shell=True,universal_newlines=True)
for line in iter(p.stderr.readline,’’): print(line.rstrip());

stdout,stderr=p.communicate()
p.stderr.close()
p.stdout.close()
returncode=p.wait()

print("stdout=%s" % stdout)
print("stderr=%s" % stderr) #will be nothing there since we already read it all

#Note, must do the above, simple p.returncode returns None
